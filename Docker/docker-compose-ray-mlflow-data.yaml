name: ml_platform
services:
  # === DATA INITIALIZATION ===
  init-data:
    image: python:3.11
    volumes:
      - EYE:/data
      - /mnt/object/transformed_eye_dataset:/source_data:ro  # Mounting dataset folder from object (read-only)

    working_dir: /data
    command:
      - bash
      - -c
      - |
        set -e  # Stop on error
        echo "Creating dataset directory..."
        echo "Copying dataset from /source_data to /data/transformed_eye_dataset..."
        mkdir -p /data/transformed_eye_dataset
        cp -r /source_data/* /data/transformed_eye_dataset/

        echo "Dataset copied successfully."
    restart: "no"

  # === SHARED MINIO SERVICE ===
  minio:
    image: minio/minio
    container_name: minio-ml-platform  # Changed to avoid conflict
    restart: always
    expose:
      - "9000"
    ports:  
      - "9000:9000"  # API for object storage
      - "9001:9001"  # Web-based UI
    environment:
      MINIO_ROOT_USER: "Project24-id"
      MINIO_ROOT_PASSWORD: "Project240"
    healthcheck:
      test: timeout 5s bash -c ':> /dev/tcp/127.0.0.1/9000' || exit 1
      interval: 1s
      timeout: 10s
      retries: 5
    command: server /data --console-address ":9001"
    volumes:
      - minio_data:/data  # Persistent storage

  # Create buckets for both MLflow and Ray
  minio-create-buckets:
    image: minio/mc
    depends_on:
      minio:
        condition: service_healthy
    entrypoint: >
      /bin/sh -c "
      mc alias set minio http://minio-ml-platform:9000 Project24-id Project240 &&
      if ! mc ls minio/mlflow-artifacts; then
        mc mb minio/mlflow-artifacts &&
        echo 'Bucket mlflow-artifacts created'
      else
        echo 'Bucket mlflow-artifacts already exists';
      fi &&
      if ! mc ls minio/ray; then
        mc mb minio/ray &&
        echo 'Bucket ray created'
      else
        echo 'Bucket ray already exists';
      fi"

  # === MLFLOW SERVICES ===
  postgres:
    image: postgres:latest
    container_name: postgres-ml-platform  # Changed to avoid conflict
    restart: always
    environment:
      POSTGRES_USER: Project24-id
      POSTGRES_PASSWORD: Project240
      POSTGRES_DB: mlflowdb
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U Project24-id -d mlflowdb"]
      interval: 5s
      timeout: 5s
      retries: 5

  mlflow:
    image: ghcr.io/mlflow/mlflow:v2.20.2
    container_name: mlflow-ml-platform  # Changed to avoid conflict
    restart: always
    depends_on:
      minio:
        condition: service_healthy
      postgres:
        condition: service_healthy
      minio-create-buckets:
        condition: service_completed_successfully
    environment:
      MLFLOW_TRACKING_URI: http://0.0.0.0:8000
      MLFLOW_S3_ENDPOINT_URL: http://minio-ml-platform:9000
      AWS_ACCESS_KEY_ID: "Project24-id"
      AWS_SECRET_ACCESS_KEY: "Project240"
    ports:
      - "8000:8000"
    command: >
      /bin/sh -c "pip install psycopg2-binary boto3 &&
      mlflow server --backend-store-uri postgresql://Project24-id:Project240@postgres-ml-platform/mlflowdb 
      --artifacts-destination s3://mlflow-artifacts/ --serve-artifacts --host 0.0.0.0 --port 8000"
    volumes:
      - EYE:/mnt/data  # Mount dataset for potential direct access

  # === RAY CLUSTER ===
  ray-head:
    image: rayproject/ray:2.42.1
    container_name: ray-head-ml-platform  # Changed to avoid conflict
    command: |
      /bin/sh -c "
      mkdir -p /tmp/ray && 
      chown -R root:root /tmp/ray &&
      ray metrics launch-prometheus &&
      pip install mlflow boto3 s3fs &&
      ray start --head --port=6379 --dashboard-host=0.0.0.0 --block --metrics-export-port=8080"
    ports:
      - "6379:6379"  # Ray client port
      - "8265:8265"  # Ray dashboard
      - "8080:8080"  # Metrics export
      - "8090:8090"  # Internal Ray metrics
      - "9090:9090"  # Prometheus
    shm_size: '12g'
    volumes:
      - ray_tmp:/tmp/ray
      - EYE:/mnt/data
    environment:
      - RAY_GRAFANA_HOST=http://grafana-ml-platform:3000
      - RAY_GRAFANA_IFRAME_HOST=http://${HOST_IP}:3000
      - RAY_PROMETHEUS_HOST=http://ray-head-ml-platform:9090
      - RAY_PROMETHEUS_NAME=Prometheus
      - AWS_ACCESS_KEY_ID=Project24-id
      - AWS_SECRET_ACCESS_KEY=Project240
      - AWS_ENDPOINT_URL=http://minio-ml-platform:9000
      - MLFLOW_TRACKING_URI=http://mlflow-ml-platform:8000
    user: root
    depends_on:
      - mlflow
      - minio

  grafana:
    image: grafana/grafana:latest
    container_name: grafana-ml-platform  # Changed to avoid conflict
    entrypoint: |
      /bin/sh -c "
      # Wait for config directory
      while [ ! -f /tmp/ray/session_latest/metrics/grafana/grafana.ini ]; do
        echo 'Waiting for Grafana config files...'
        sleep 2
      done
      
      # Start Grafana with copied config
      /run.sh --config /tmp/ray/session_latest/metrics/grafana/grafana.ini"
    ports:
      - "3000:3000"
    volumes:
      - grafana_storage:/var/lib/grafana
      - ray_tmp:/tmp/ray:ro
    environment:
      - GF_INSTALL_PLUGINS=grafana-piechart-panel
      - GF_PATHS_PROVISIONING=/tmp/ray/session_latest/metrics/grafana/provisioning
      - GF_SERVER_HTTP_ADDR=0.0.0.0
      - GF_DATABASE_TYPE=sqlite3
      - GF_AUTH_ANONYMOUS_ENABLED=true
      - GF_AUTH_ANONYMOUS_ORG_ROLE=Admin
      - GF_SECURITY_ALLOW_EMBEDDING=true
      - GF_AUTH_DISABLE_LOGIN_FORM=true
      - GF_AUTH_PROXY_ENABLED=true
      - GF_AUTH_PROXY_AUTO_SIGN_UP=true
    depends_on:
      - ray-head

  ray-worker-0:
    image: ray-rocm:2.42.1  # Your custom ROCm image
    container_name: ray-worker-0-ml-platform  # Changed to avoid conflict
    command: |
      /bin/sh -c "
      pip install mlflow boto3 s3fs &&
      ray start --address=ray-head-ml-platform:6379 --num-cpus=32 --num-gpus=1 --block"
    devices:
      - /dev/kfd
      - /dev/dri/renderD128
    environment:
      - HIP_VISIBLE_DEVICES=0
      - ROCR_VISIBLE_DEVICES=0
      - AWS_ACCESS_KEY_ID=Project24-id
      - AWS_SECRET_ACCESS_KEY=Project240
      - AWS_ENDPOINT_URL=http://minio-ml-platform:9000
      - MLFLOW_TRACKING_URI=http://mlflow-ml-platform:8000
    shm_size: '12g'
    volumes:
      - EYE:/mnt/data
    depends_on:
      - ray-head

  ray-worker-1:
    image: ray-rocm:2.42.1  # Your custom ROCm image
    container_name: ray-worker-1-ml-platform  # Changed to avoid conflict
    command: |
      /bin/sh -c "
      pip install mlflow boto3 s3fs &&
      ray start --address=ray-head-ml-platform:6379 --num-cpus=32 --num-gpus=1 --block"
    devices:
      - /dev/kfd
      - /dev/dri/renderD129
    environment:
      - HIP_VISIBLE_DEVICES=0
      - ROCR_VISIBLE_DEVICES=0
      - AWS_ACCESS_KEY_ID=Project24-id
      - AWS_SECRET_ACCESS_KEY=Project240
      - AWS_ENDPOINT_URL=http://minio-ml-platform:9000
      - MLFLOW_TRACKING_URI=http://mlflow-ml-platform:8000
    shm_size: '12g'
    volumes:
      - EYE:/mnt/data
    depends_on:
      - ray-head

volumes:
  grafana_storage:
  ray_tmp:
  minio_data:
  postgres_data:
  EYE:
    external: true  # Uses externally created volume
